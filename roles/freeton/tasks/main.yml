---
# Create freeton group
- name: Create ton group
  group:
    name: "{{ ton_group }}"
    state: present

# Create freeton user
- name: Create ton user
  user:
    name: "{{ ton_user }}"
    groups: "{{ ton_group }}"

# Create folder for logs
- name: Give insecure permissions to an existing file
  file:
    state: directory
    path: "{{log_path}}"
    owner: root
    group: root
    mode: "644"

# Pull repository
- name: pull repo
  git:
    repo: "https://github.com/tonlabs/main.ton.dev.git"
    dest: "{{ install_path }}/{{ ton_src }}/"

# Tonuser is own of folder
- name: Own tonuser
  file:
    path: "{{ install_path }}/{{ ton_src }}/"
    recurse: yes
    owner: "{{ ton_user }}"
    group: "{{ ton_group }}"

# Check build
- name: Check keys directory
  stat:
    path: "{{ install_path }}/{{ ton_src }}//configs/SafeMultisigWallet.tvc"
  register: build_done

# Build node
- name: Build node
  shell:
    cmd: source env.sh && ./build.sh
    chdir: /srv/main.ton.dev.git/scripts
  args:
    executable: /bin/bash
  when: keyfolder.stat.exists == false

# Check key directory for avoid recreate
- name: Check keys directory
  stat:
    path: "/home/{{ ton_user }}/ton-keys"
  register: keyfolder

# Setup node
- name: Setup node
  become: yes
  # become_user: "{{ ton_user }}"
  shell:
    cmd: ./setup.sh
    chdir: "{{ install_path }}/{{ ton_src }}/scripts"
  args:
    executable: /bin/bash
  when: keyfolder.stat.exists == false

- name: Copy keys
  become: yes
  shell:
    cmd: mv /root/ton-keys /home/{{ ton_user }}/ton-keys
  args:
    executable: /bin/bash
  when: keyfolder.stat.exists == false

- name: Change ownership
  file:
    path: /home/{{ ton_user }}/ton-keys
    state: directory
    recurse: yes
    owner: "{{ ton_user }}"
    group: "{{ ton_group }}"
  when: keyfolder.stat.exists == false

# Generate new keys
- name: Generate keys
  shell:
    cmd: ./msig_genaddr.sh >> "{{ install_path }}/ton-keys/seed_phrase.secret"
    chdir: "{{ install_path }}/{{ ton_src }}/scripts"
  sudo_user: "{{ ton_user }}"
  args:
    executable: /bin/bash
  when: keyfolder.stat.exists == false

# Add service
- name: Create Unit file
  template:
    src: freeton.service.j2
    dest: /etc/systemd/system/freeton.service
    mode: 644
  notify:
    - reload systemctl

# Check that service is working and start on boot
- name: Start freeton
  service:
    name: freeton.service
    state: started
    enabled: yes

# Add cronjob
- name: Cronjob for validator script
  cron:
    name: "validator script"
    minute: "*/10"
    cron_file: freeton_validator
    user: "{{ton_user}}"
    job: "{{ install_path }}/{{ ton_src }}/scripts/validator_msig.sh 10001 >> {{log_path}}/validator.log"

# Get public keycloak_client
- name: Get publickey
  shell:
    cmd: cat msig.keys.json | jq -r '.public'
    chdir: "/home/{{ ton_user }}/ton-keys"
  register: publickey
  args:
    executable: /bin/bash
#
#
# Not sure that this action is necessary
#
# # Deploy wallet
# - name: Deploy wallet
#   shell:
#     cmd: ./tonos-cli deploy "{{ install_path }}/{{ ton_src }}/configs/SafeMultisigWallet.tvc '{"owners":["0x{{ publickey.stdout }}"],"reqConfirms":1}' --abi "{{ install_path }}/{{ ton_src }}/configs/SafeMultisigWallet.abi.json" --sign "{{ install_path }}/ton-keys/msig.keys.json" --wc -1
#     chdir: "{{ install_path }}/{{ ton_src }}/ton/build/utils"
#   args:
#     executable: /bin/bash
#   when: keyfolder.stat.exists == false

